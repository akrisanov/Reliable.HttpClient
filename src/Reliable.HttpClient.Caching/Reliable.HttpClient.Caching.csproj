<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- TargetFrameworks, LangVersion, ImplicitUsings, Nullable inherited from
    Directory.Build.props -->
    <AssemblyName>Reliable.HttpClient.Caching</AssemblyName>
    <PackageId>Reliable.HttpClient.Caching</PackageId>
    <Version>1.3.0</Version>
    <PackageReleaseNotes>ðŸŽ‰ v1.3.0 Release - PATCH Method Support &amp; Enhanced Caching!

      âœ¨ Major New Features:
      â€¢ Complete HTTP PATCH method support in HttpClientWithCache and CachedHttpClient&lt;T&gt;
      â€¢ Four PATCH method overloads matching main HttpClient module capabilities
      â€¢ Intelligent cache invalidation for PATCH operations - responses not cached, but related
      cache entries invalidated
      â€¢ Full header support for PATCH operations including OAuth and authentication scenarios
      â€¢ Smart error handling - cache remains intact if PATCH operation fails

      ðŸ”§ API Enhancements:
      â€¢ PatchAsync&lt;TRequest, TResponse&gt;(uri, request) - Typed request/response with cache
      invalidation
      â€¢ PatchAsync&lt;TRequest, TResponse&gt;(uri, request, headers) - With custom headers support
      â€¢ PatchAsync&lt;TRequest&gt;(uri, request) - Returns raw HttpResponseMessage
      â€¢ PatchAsync&lt;TRequest&gt;(uri, request, headers) - Raw response with headers
      â€¢ Consistent caching behavior: GET operations cached, mutating operations (POST, PUT, PATCH)
      invalidate cache
      â€¢ Comprehensive test coverage (336+ tests) validating all PATCH scenarios

      ðŸŽ¯ Key Use Cases:
      â€¢ RESTful API updates with intelligent cache management
      â€¢ Partial resource updates with cache invalidation patterns
      â€¢ Authentication-aware PATCH operations with header support
      â€¢ Multi-tenant PATCH operations with isolated cache invalidation
      â€¢ Error-resilient updates that preserve cache integrity on failures

      ðŸš€ Quick Start:
      // PATCH with automatic cache invalidation
      var updated = await client.PatchAsync&lt;UpdateRequest, UserResponse&gt;("/users/123",
      request);

      // PATCH with headers and cache management
      await client.PatchAsync("/api/resource", data, headers);

      ðŸ”„ Previous Features (v1.2.0):
      â€¢ Full custom headers support matching main HttpClient module capabilities
      â€¢ DefaultHeaders property in HttpCacheOptions for static headers across all cached requests
      â€¢ Per-request headers support in all HTTP methods (GET, POST, PUT, DELETE)
      â€¢ Intelligent cache key generation that includes headers for proper cache isolation
      â€¢ Enhanced HttpClientWithCache with comprehensive header support

      ðŸ“š Full documentation: https://github.com/akrisanov/Reliable.HttpClient

      âš¡ Breaking Changes: None - fully backward compatible
    </PackageReleaseNotes>
    <Authors>Andrey Krisanov</Authors>
    <Company></Company>
    <Description>Intelligent HTTP response caching for Reliable.HttpClient with comprehensive custom
      headers support.
      Features two distinct approaches: Generic type-safe caching (CachedHttpClient&lt;T&gt;) for
      specific response types
      and Universal caching (HttpClientWithCache) for multi-type scenarios. Includes DefaultHeaders
      configuration,
      per-request header support, intelligent cache key generation with header isolation,
      preset-based
      configuration, automatic memory management, and zero-setup convenience methods.</Description>
    <PackageTags>
      httpclient;caching;resilience;memory-cache;presets;zero-config;dotnet;generic;type-safe;universal;headers;oauth;authentication</PackageTags>
    <RepositoryUrl>https://github.com/akrisanov/Reliable.HttpClient</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <DebugType>portable</DebugType>
    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions"
      Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="9.0.8" />
    <!-- For release: uncomment PackageReference and comment out ProjectReference -->
    <!-- <PackageReference Include="Reliable.HttpClient" Version="1.3.0" /> -->
  </ItemGroup>

  <ItemGroup>
    <!-- For development and testing: use ProjectReference -->
    <ProjectReference Include="../Reliable.HttpClient/Reliable.HttpClient.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="/" />
  </ItemGroup>
</Project>
